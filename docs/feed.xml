<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>JBake</title>
        <link>http://jbake.org</link>
        <atom:link href="http://jbake.org/feed.xml" rel="self" type="application/rss+xml" />
        <description>JBake Bootstrap Template</description>
        <language>en-gb</language>
        <pubDate>Sun Oct 16 22:05:40 UTC 2022</pubDate>
        <lastBuildDate>Sun Oct 16 22:05:40 UTC 2022</lastBuildDate>

                <item>
            <title>Enhanced Dynamo DB  and Integration Test Using Dynamo Local</title>
            <link>http://jbake.org/blog/2022/dynamo-local.html</link>
            <pubDate>Sun Oct 16 00:00:00 UTC 2022</pubDate>
            <guid isPermaLink="false">blog/2022/dynamo-local.html</guid>
            <description>
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;AWS Released  new Enhanced Dynamo Client &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/dynamodb-enhanced-client.html&quot;&gt;Enhanced Dynamo Client&lt;/a&gt; which helps Java developers to easily Implement  DAO Implementation without writing the mapping logic and AWS provides &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html&quot;&gt;Downloadable DynamoDb&lt;/a&gt; which  helps developers to do the Integration testing with Dynamo DB without connecting to the Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post explains how to Implement  a generic &lt;strong&gt;DynamoDBService&lt;/strong&gt; Class using &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/dynamodb-enhanced-client.html&quot;&gt;Enhanced Dynamo Client&lt;/a&gt; and Write Unit/Integration Test Cases  using &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html&quot;&gt;Downloadable DynamoDb&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full source code can be found under following &lt;a href=&quot;https://github.com/fazeem84/DynamoDbLocal&quot;&gt;repo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have used following links and github repos to build this example&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/dynamodb-local-integration-testsl&quot;&gt;baeldung&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/redskap/aws-dynamodb-java-example-local-testing&quot;&gt;redskap GitRepository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Java &amp;gt; 11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gradle &amp;gt; 5&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting_enhanced_client_in_gradle&quot;&gt;Setting Enhanced Client in Gradle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To set up enhanced Client in Gradle following dependecies needs to be added&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;EnhancedDynamo&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;gradle&quot;&gt;    implementation &#39;com.amazonaws:aws-java-sdk-dynamodb:1.11.434&#39;
    implementation &#39;software.amazon.awssdk:dynamodb:2.17.28&#39;
    implementation &#39;software.amazon.awssdk:dynamodb-enhanced:2.17.28&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting_up_dynamodb_local&quot;&gt;Setting up DynamoDb Local&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aws documentation provides steps to setting up &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html&quot;&gt;maven build&lt;/a&gt; but Gradle setting up is not provided by AWS  and this library is not available central maven repo, so users needs to set up aws maven repo for setting DynamoDb Local&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;MavenRepoSetup&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;gradle&quot;&gt;repositories {
    maven {
        name
         url &quot;https://s3-us-west-2.amazonaws.com/dynamodb-local/release&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;following dependency will add DynamoDbLocal to the gradle project&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;DynamoLocalSetup&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;gradle&quot;&gt;testImplementation group: &#39;com.amazonaws&#39;, name: &#39;DynamoDBLocal&#39;, version: &#39;1.11.119&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;you can find more info about the set up in &lt;a href=&quot;https://github.com/redskap/aws-dynamodb-java-example-local-testing/blob/master/README.md&quot; class=&quot;bare&quot;&gt;https://github.com/redskap/aws-dynamodb-java-example-local-testing/blob/master/README.md&lt;/a&gt;
 . As a part of test setup copy &lt;a href=&quot;https://github.com/redskap/aws-dynamodb-java-example-local-testing/blob/master/src/test/java/io/redskap/java/aws/dynamodb/example/local/testing/AwsDynamoDbLocalTestUtils.java&quot;&gt;AwsDynamoDbLocalTestUtils&lt;/a&gt; and call &lt;a href=&quot;https://github.com/redskap/aws-dynamodb-java-example-local-testing/blob/master/src/test/java/io/redskap/java/aws/dynamodb/example/local/testing/AwsDynamoDbLocalTestUtils.java#L30&quot;&gt;AwsDynamoDbLocalTestUtils#initSqLite()&lt;/a&gt; during setup function of JUnit Test class&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dynamodb_domain_pojo&quot;&gt;DynamoDb Domain POJO&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This class is POJO representation of Dynamo DB schema, I have used  &lt;a href=&quot;https://projectlombok.org/&quot;&gt;lombok&lt;/a&gt; to avoid boiler plating of Getter and Setter methods, @DynamoDbBean represents dynamo db structure and @DynamoDbPartitionKey represents primary key id&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;DynamoDB&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;Java&quot;&gt;@Data
@DynamoDbBean
public class Student {
    private String studentId;
    private String studentName;
    private String department;
    @DynamoDbPartitionKey
    @DynamoDbAttribute(&quot;studentId&quot;)
    public String getStudentId() {
        return studentId;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dynamodb_service_implementation&quot;&gt;DynamoDb Service Implementation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This class has full DAO implementation&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;CreateTable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert/Update Item based on partitions key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get Item by Id&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fazeem84/DynamoDbLocal/blob/main/src/main/java/com/dynamo/local/service/DynamoDBService.java&quot;&gt;DynamoDBService.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting_up_junit_test_class&quot;&gt;Setting Up JUnit Test class&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the startup JUnit will spin up a local dynamo DB instance and following code shows how to establish DynamoClient connectivity to local instance&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;DynamoDB&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;Java&quot;&gt;private static final String TABLE_NAME = &quot;Student&quot;;
private static  DynamoDBProxyServer server;
private static final String port = &quot;8000&quot;;
private static final String uri = &quot;http://localhost:&quot;+port;

 @BeforeEach
    public void setUpTest() throws Exception {
        &#39;AwsDynamoDbLocalTestUtils copied from the github repo as explained earlier&#39;
        AwsDynamoDbLocalTestUtils.initSqLite();
        &#39;This line will spin up local instance on 8080 port&#39;
        server = ServerRunner.createServerFromCommandLineArgs(
                new String[]{&quot;-inMemory&quot;, &quot;-port&quot;, port});
        server.start();
        client=DynamoDbClient.builder()
                .endpointOverride(URI.create(uri))
                .region(Region.AF_SOUTH_1)&#39;Any region should work &#39;
                .credentialsProvider(StaticCredentialsProvider.create(
                        AwsBasicCredentials.create(&quot;fakeMyKeyId&quot;,&quot;fakeSecretAccessKey&quot;)))
                .build();

    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;            </description>
        </item>
                <item>
            <title>Building your personal blog with JBake and GitHub Pages</title>
            <link>http://jbake.org/blog/2022/first-blog.html</link>
            <pubDate>Sat Jan 01 00:00:00 UTC 2022</pubDate>
            <guid isPermaLink="false">blog/2022/first-blog.html</guid>
            <description>
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post explains steps to generate and deploy  personal blog site&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;techstack&quot;&gt;TechStack&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jbake&quot;&gt;JBake&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JBake is a Java based, open source, static site/blog generator founded by Jonathan Bullock for developers &amp;amp; designers (&lt;a href=&quot;https://jbake.org/&quot; class=&quot;bare&quot;&gt;https://jbake.org/&lt;/a&gt;) .The main highlights of JBake are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open Source - Source available on GitHub, licensed under MIT License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cross platform support - The binary distribution runs on Windows, Unix/Linux and Mac OS X.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content Formats - Supports AsciiDoc, Markdown and good old HTML formatted content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open Structure - Structure your content any way you see fit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blog Aware - RSS/Atom feed, archive and tag support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draft support - View your draft content before publishing it and making it available to the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Self contained - Binary distribution contains everything you need apart from a JRE, no complicated environment setup with 3rd party dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build tools - Plugins available for Gradle, Maven, mill, SBuild and sbt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template Support - Freemarker, Groovy, Thymeleaf, Jade and Pebble based templates &amp;amp; scripting support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSS Framework Support - Easily integrate CSS frameworks such as Bootstrap and Foundation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom Metadata - Add as much metadata to content as you like, also exposed to templates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage Support - Store your site content in Dropbox, CVS, SVN, Git or whatever you want.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gradle&quot;&gt;Gradle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post I used  Gradle  to build the static content and deploy the website using Github actions&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;github_pages&quot;&gt;GitHub Pages&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GitHub pages (&lt;a href=&quot;https://pages.github.com/&quot; class=&quot;bare&quot;&gt;https://pages.github.com/&lt;/a&gt;) is a hosting service provided GitHub which help GitHub users to their website directly from github repo .&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;github_action&quot;&gt;GitHub Action&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GitHub action is a CI/CD service provided by GitHub&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;steps_for_setting_up_your_blog&quot;&gt;Steps for Setting up your Blog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Setup the GitHub Repository&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;login to github and create new public repository&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/first-blog/git_create_project.JPG&quot; alt=&quot;Create Public Repository&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clone the repo into your local  either by using IDE&amp;#8217;s or command line&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;git clone https://github.com/fazeem84/TestJBake.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup JBake using gradle&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add build.gradle and include JBake gradle plugin as shown below&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath  &#39;commons-configuration:commons-configuration:1.10&#39;
    }
}

plugins {
    id &#39;org.jbake.site&#39; version &#39;5.5.0&#39;
}
bakeInit {
    template = &#39;freemarker&#39;
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;this plugin has capability of downloading the template to your source folder from a url or a pre-defined teamplate available in JBake GitHub Repo for more information please check &lt;a href=&quot;https://github.com/jbake-org/jbake-gradle-plugin/blob/master/README.adoc&quot; class=&quot;bare&quot;&gt;https://github.com/jbake-org/jbake-gradle-plugin/blob/master/README.adoc&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute Gradle JBake Init command&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;gradle bakeInit&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will generate the following folder structure with template source code&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/first-blog/folder_structure.JPG&quot; alt=&quot;New Folder Structure&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;if you want know more details about the folders inside directory please refer &lt;a href=&quot;https://jbake.org/docs/2.6.7/#project_structure&quot; class=&quot;bare&quot;&gt;https://jbake.org/docs/2.6.7/#project_structure&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute bake step&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;bake step will transform  the source  contents  in different format like .md,adoc etc to pure html ,bake step can be triggered using following gradle command&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;gradle bake&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once it&amp;#8217;s successfully executed the static content will be generated under build folder&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/first-blog/build_folder.JPG&quot; alt=&quot;build Folder Structure&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running web server from your local environment&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;run following gradle command to start the webserver, the server will be running on 8080 port by default&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;gradle bakePreview --no-daemon&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/first-blog/blog-local.JPG&quot; alt=&quot;Local Blog&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup GitHub Action&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This section describes how to run gradle bake command once the code  pushed to the master branch and in this example we have set up a separate branch to host git hub page so last step of build execution is to copy the gnerated files into the specified branch&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure you have all permission to run the GitHub action &lt;a href=&quot;https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository&quot; class=&quot;bare&quot;&gt;https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create a new branch(gh-pages) from where the git hub page will be served in future steps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create .git/workflow folder and create yaml/yml file build file and copy paste  the following code and check-in/push the repository into github(Make sure your committing tha gradle folder and gradle related file in the  root folder )&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;name: Jbake-WorkFlow
on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        uses: actions/checkout@v2
      -
        name: &quot;Set up JDK 11 &quot;
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: &quot;11&quot;
      -
        name: &quot;Validate Gradle wrapper&quot;
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      -
        name: &quot;Build with Gradle&quot;
        run: &quot;./gradlew bake&quot;
      -
        name: Deploy
        uses: JamesIves/github-pages-deploy-action@4.1.7
        with:
          BRANCH: gh-pages
          FOLDER: build/jbake&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;after pushing the code build will kick start in the action section and generated file will be copied to a new branch (gh-pages in this example,please check deploy stage in yaml file)&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/first-blog/action.JPG&quot; alt=&quot;action Blog&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/first-blog/gh-pages.JPG&quot; alt=&quot;GH Pages&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Source Code is available in &lt;a href=&quot;https://github.com/fazeem84/TestJBake&quot; class=&quot;bare&quot;&gt;https://github.com/fazeem84/TestJBake&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup GitHub Page&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Navigate to repository settings and select the branch from which the website is being server from (gh-page in our example) and save the settings&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/first-blog/git-hub-page.JPG&quot; alt=&quot;Page Settings&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Page is successfully hosted on the url as in the GitHub Page settings&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;            </description>
        </item>
        
    </channel>
</rss>
